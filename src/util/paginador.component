<can-component tag="aleph-paginador">
	<style type="less">
		display: block;
		
		p { font-weight: bold; }
	</style>
	<template>
		<nav aria-label="Page navigation">
			<ul class="pagination">
				<li {{#if canPrev}} ($click)="prev()" {{else}} class="disabled" {{/if}}>
					<a aria-label="Anterior">
						<span aria-hidden="true">&laquo;</span>
					</a>
				</li>
				{{#pages}}
					<li {{#active}} class="active" {{/active}}>
						<a {{^active}} ($click)="setPage(.)"{{/active}}>
							{{number}}
						</a>
					</li>
				{{/pages}}
				<li {{#if canNext}} ($click)="next()" {{else}} class="disabled" {{/if}}>
					<a aria-label="Siguiente">
						<span aria-hidden="true">&raquo;</span>
					</a>
				</li>
			</ul>
		</nav>
	</template>
	<script type="view-model">
		import Map from 'can/map/';
		import 'can/map/define/';

		export default Map.extend(
			{
				define:
				{
					data:
					{
						value: undefined
					,	set: function(promise)
						{
							var	self
							=	this;

							promise
								.then(
									function(result)
									{
										self.attr('count',result.total)
										self.attr('offset',result.skip)
										self.attr('limit',result.limit)
										self.createPages();
									}
								);

							return promise;	
						}
					}
				,	count:
					{
						value:	Infinity
					}
				,	offset:
					{
						value:	0
					}
				,	limit:
					{
						value:	5
					}
				,	pages:
					{
						value: 0
					}
				}
				// set current page
			,	setPage: function(page)
				{
					this.attr('offset', ( parseInt(page.number) - 1 ) * this.attr('limit') );
					this.attr('pages').each(
						function(p)
						{
							if (p.active) {
								p.attr('active',false);
							}
						}
					)
					page.attr('active',true)
				}
				// create pages array
			,	createPages: function()
				{
					var	self
					=	this;

					self.attr(
						'pages'
					,	Array.from(Array(self.pageCount()).keys())
							.map(
								function(x)
								{
									return	{
												number:	x+1
											,	active: (x == self.page() - 1) ? true : false
											}
								}
							)
					);
				}
				// move to next page
			,	next: function()
				{
					this.attr('offset', this.offset + this.limit);
					this.attr('pages').attr(this.page()-2).attr('active',false)
					this.attr('pages').attr(this.page()-1).attr('active',true)
				}
				// move to previus page
			,	prev : function()
				{
					this.attr('offset', this.offset - this.limit )
					this.attr('pages').attr(this.page()-1).attr('active',true)
					this.attr('pages').attr(this.page()).attr('active',false)
				}
				//	check next
			,	canNext : function()
				{
					return this.attr('offset') < this.attr('count') - this.attr('limit')
				}
				//	check prev
			,	canPrev: function()
				{
					return this.attr('offset') > 0
				}
				//	get page
			,	page: function(newVal)
				{
					return Math.floor( this.attr('offset') / this.attr('limit') )+1;
				}
			//	get page count
			,	pageCount: function()
				{
					return	this.attr('count')
							?	Math.ceil( this.attr('count')	/ this.attr('limit') )
							:	1;
				}
			,	init: function()
				{
					var	self
					=	this;

					this
						.bind(
							'offset'
						,	function(obj,newVal,oldVal)
							{
								self.attr('query.$skip',newVal);
							}
						)
				}
			}
		);
	</script>
</can-component>